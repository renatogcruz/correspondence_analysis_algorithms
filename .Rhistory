It_explicada
0.7342075 + 0.2657925
#Decomposição do valor singular da matriz A
decomp <- svd(x = A_matriz,
nu = dimensoes,
nv = dimensoes)
decomp
#Variável em linha - coordenada no eixo das abcissas
Xl_perfil <- diag((decomp$d[1]) * diag(diag(Dl)^(-1/2)) * decomp$u[,1])
Xl_perfil
#Variável em linha - coordenada no eixo das ordenadas
Yl_perfil <- diag((decomp$d[2]) * diag(diag(Dl)^(-1/2)) * decomp$u[,2])
Yl_perfil
#Variável em coluna - coordenada no eixo das abcissas
Xc_aplicacao <- diag((decomp$d[1]) * diag(diag(Dc)^(-1/2)) * decomp$v[,1])
Xc_aplicacao
#Variável em coluna - coordenada no eixo das ordenadas
Yc_aplicacao <- diag((decomp$d[2]) * diag(diag(Dc)^(-1/2)) * decomp$v[,2])
Yc_aplicacao
# Passo 1: Guardando as coordenadas, de cada categoria e de cada variável,  num
# único objeto
coordenadas <- data.frame(Categorias = cbind(c(levels(perfil_investidor$perfil),
levels(perfil_investidor$aplicacao))),
Dim1 = cbind(c(Xl_perfil, Xc_aplicacao)),
Dim2 = cbind(c(Yl_perfil, Yc_aplicacao)))
coordenadas
# Passo 2: Como iremos estratificar as categorias em função de cores distintas
# em função de qual variável elas pertencem, vamos criar uma coluna que faça
# essa identificação:
variaveis <- apply(perfil_investidor[,2:3],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
variaveis
# Passo 3: Vamos juntar, o objeto variaveis ao objeto coordenadas:
coordenadas_final <- data.frame(coordenadas,
Variaveis = rep(names(variaveis), variaveis))
coordenadas_final
# Passo 4: Plotando o mapa perceptual bidimensional:
coordenadas_final %>%
rownames_to_column() %>%
rename(Category = 1) %>%
ggplot(aes(x = Dim1, y = Dim2, label = Categorias, color = Variaveis)) +
geom_point() +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimension 1:", paste0(round(It_explicada[1] * 100, digits = 2), "%")),
y = paste("Dimension 2:", paste0(round(It_explicada[2] * 100, digits = 2), "%"))) +
scale_color_manual("Variable:",
values = c("darkorchid", "orange")) +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","sjPlot","reshape2","FactoMineR",
"cabootcrs","knitr","kableExtra","gifski","gganimate","factoextra",
"plot3D")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#Carregando a base de dados
load(file = "cpc_geral.RData")
View(cpc_geral)
#Observado os dados carregados
cpc_geral %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Tabelas de frequências
summary(cpc_geral)
#Criando uma tabela de contingências PASSO 1
tab <- table(cpc_geral$categoria,
cpc_geral$cpc)
tab
#Exemplo de uma tabela de contingências mais elegante
sjt.xtab(var.row = cpc_geral$categoria,
var.col = cpc_geral$cpc,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE)
#Teste Qui-Quadrado
qui2 <- chisq.test(tab)
qui2
#Mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(categoria = 1,
cpc = 2) %>%
ggplot(aes(x = fct_rev(categoria), y = cpc, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3) +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "red",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text())
#Elaborando a ANACOR:
anacor <- CA(tab)
#Capturando todas as coordenadas num só objeto
ca_coordenadas <- rbind(anacor$row$coord, anacor$col$coord)
ca_coordenadas
View(ca_coordenadas)
#Capturando a quantidade de categorias por variável
id_var <- apply(cpc_geral[,c(4,6)],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
id_var
#Juntando as coordenadas e as categorias capturadas anteriormente
ca_coordenadas_final <- data.frame(ca_coordenadas,
Variable = rep(names(id_var), id_var))
ca_coordenadas_final
View(ca_coordenadas_final)
#Mapa perceptual elegante:
ca_coordenadas_final %>%
rownames_to_column() %>%
rename(Category = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = Category,
color = Variable,
shape = Variable)) +
geom_point(size = 3) +
geom_label_repel() +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(x = paste("Dimension 1:", paste0(round(anacor$eig[1,2], digits = 2), "%")),
y = paste("Dimension 2:", paste0(round(anacor$eig[2,2], digits = 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
#Repetindo o mapa de calor dos resíduos padronizados ajustados
data.frame(qui2$stdres) %>%
rename(categoria = 1,
cpc = 2) %>%
ggplot(aes(x = fct_rev(categoria), y = cpc, fill = Freq, label = round(Freq,3))) +
geom_tile() +
geom_text(size = 3) +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "red",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.text.x = element_text())
# Capturando as coordenadas das categorias da variável disposta em linha
coordenadas_linhas <- anacor$row$coord
coordenadas_linhas
# Capturando as coordenadas das categorias da variável disposta em coluna
coordenadas_colunas <- anacor$col$coord
coordenadas_colunas
# Reservando um objeto que conterá nosso gráfico 3D
mapa_perceptual_3D <- plot_ly()
mapa_perceptual_3D
# Inserindo as coordenadas das categorias da variável disposta em linha
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_linhas[,1],
y = coordenadas_linhas[,2],
z = coordenadas_linhas[,3],
mode = "text",
text = rownames(coordenadas_linhas),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
mapa_perceptual_3D
# Inserindo as coordenadas das categorias da variável disposta em coluna
mapa_perceptual_3D <- add_trace(mapa_perceptual_3D,
x = coordenadas_colunas[,1],
y = coordenadas_colunas[,2],
z = coordenadas_colunas[,3],
mode = "text",
text = rownames(coordenadas_colunas),
textfont = list(color = "#287C8EFF"),
showlegend = FALSE)
mapa_perceptual_3D
# Inserindo o nome dos eixos (Dimensão 1, Dimensão 2 e Dimensão 3)
mapa_perceptual_3D <- layout(mapa_perceptual_3D,
scene = list(xaxis = list(title = colnames(coordenadas_linhas)[1]),
yaxis = list(title = colnames(coordenadas_linhas)[2]),
zaxis = list(title = colnames(coordenadas_linhas)[3]),
aspectmode = "data"),
margin = list(l = 0, r = 0, b = 0, t = 0))
mapa_perceptual_3D
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","sjPlot","knitr","kableExtra",
"FactoMineR","cabootcrs")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Análise de Correspondênciasa Múltiplas (ACM) - Abordagem Teórica --------
# Carregando a base de dados
load(file = "perfil_investidor_aplicacao.RData")
View(perfil_investidor_aplicacao)
# Apresentando os dados
perfil_investidor_aplicacao %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Perfil x Aplicação
sjt.xtab(var.row = perfil_investidor_aplicacao$perfil,
var.col = perfil_investidor_aplicacao$aplicacao,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE)
# Perfil x Estado Civil
sjt.xtab(var.row = perfil_investidor_aplicacao$perfil,
var.col = perfil_investidor_aplicacao$estado_civil,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE)
# Aplicação x Estado Civil
sjt.xtab(var.row = perfil_investidor_aplicacao$aplicacao,
var.col = perfil_investidor_aplicacao$estado_civil,
show.exp = TRUE,
show.row.prc = TRUE,
show.col.prc = TRUE)
# A) Perfil x Aplicação
tab_perfil_aplicacao <- table(perfil_investidor_aplicacao$perfil,
perfil_investidor_aplicacao$aplicacao)
tab_perfil_aplicacao
qui2_perfil_aplicacao <- chisq.test(tab_perfil_aplicacao)
qui2_perfil_aplicacao
# B) Perfil x Estado Civil
tab_perfil_estadocivil <- table(perfil_investidor_aplicacao$perfil,
perfil_investidor_aplicacao$estado_civil)
tab_perfil_estadocivil
qui2_perfil_estadocivil <- chisq.test(tab_perfil_estadocivil)
qui2_perfil_estadocivil
# C) Aplicação x Estado Civil
tab_aplicacao_estadocivil <- table(perfil_investidor_aplicacao$aplicacao,
perfil_investidor_aplicacao$estado_civil)
tab_aplicacao_estadocivil
qui2_aplic_estad <- chisq.test(tab_aplicacao_estadocivil)
qui2_aplic_estad
Xinput = perfil_investidor_aplicacao[, 2:4]
perfil_investidor_aplicacao[, 2:4]
# Para se estabelecer uma matriz binária:
matriz_binaria <- getindicator(Xinput = perfil_investidor_aplicacao[, 2:4])
matriz_binaria
View(matriz_binaria)
CA(matriz_binaria)
# Para a matriz de Burt:
matriz_burt <- getBurt(Xinput = perfil_investidor_aplicacao[, 2:4])
matriz_burt
View(matriz_burt)
CA(matriz_burt)
# Rodando a ACM -----------------------------------------------------------
ACM <- MCA(perfil_investidor_aplicacao[, 2:4], method = "Indicador")
# O componte 'var$coord', presente no objeto ACM, contém as coordenadas
# de cada categoria.
ACM$var$coord
# Assim, temos as coordenadas:
round(ACM$var$coord, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# As inércias principais estão computadas no componente 'eig':
ACM$eig
# As coordenadas de cada observação estão no componente 'ind$coord' do objeto
# ACM:
ACM$ind$coord
# Para estudarmos o percentual da inérica principal explicada por
# dimensão, podemos:
categorias <- apply(perfil_investidor_aplicacao[,2:4],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
categorias
It <- (sum(categorias) - length(categorias)) / length(categorias)
It
sum(ACM$eig[,1])
It_explicada <- ACM$eig[,1] / sum(ACM$eig[,1])
data.frame(Dimensão = paste("Dimensão", 1:length(It_explicada)),
Inércia_Total = It_explicada) %>%
ggplot(aes(x = Dimensão,
y = Inércia_Total,
label = paste0(round(Inércia_Total,3)*100,"%"))) +
geom_bar(stat = "identity",
color = "#440154FF",
fill = "#287C8EFF") +
geom_label(vjust = 2) +
labs(title = paste("Inércia Total Explicada de",
paste0(sum(It_explicada) * 100),"%")) +
theme_bw()
# Já o número de dimensões da ACM é dado por:
dimensoes <- sum(categorias) - length(categorias)
dimensoes
#1º Definir o número de categorias por variável
categorias <- apply(perfil_investidor_aplicacao[,2:4],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
#2º transformar o objeto ACM em um data frame, levando-se em consideração quais
#tipos de coordenadas se quer plotar. Neste exemplo, utilizaremos as coordenadas
#dadas pela matriz de binária
ACM_mp <- data.frame(ACM$var$coord, Variável = rep(names(categorias), categorias))
ACM_mp %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
mutate(Categoria = gsub("perfil.","", Categoria),
Categoria = gsub("aplicacao.","", Categoria),
Categoria = gsub("estado_civil.","", Categoria)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Plotando o Mapa Perceptual:
ACM_mp %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = Categoria,
color = Variável,
shape = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "grey") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "grey") +
labs(x = paste("Dimensão 1:", paste0(round(ACM$eig[1,2], 2), "%")),
y = paste("Dimensão 2:", paste0(round(ACM$eig[2,2], 2), "%"))) +
scale_color_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
#1º Salvar as posições relativas de cada observação
ACM_observacoes_df <- data.frame(ACM$ind$coord)
ACM_observacoes_df %>%
ggplot(aes(x = Dim.1, y = Dim.2, label = perfil_investidor_aplicacao$estudante)) +
geom_point(shape = 17, color = "#E76F5AFF", size = 2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey50") +
geom_vline(xintercept = 0, linetype = "dashed", color = "grey50") +
geom_text_repel(max.overlaps = 100, size = 3) +
geom_density2d(color = "gray80") +
geom_label_repel(data = ACM_mp,
aes(x = Dim.1, y = Dim.2,
label = rownames(ACM_mp),
fill = Variável),
color = "white") +
labs(x = paste("Dimensão 1:", paste0(round(ACM$eig[,2][1], digits = 2), "%")),
y = paste("Dimensão 2:", paste0(round(ACM$eig[,2][2], digits = 2), "%"))) +
scale_fill_viridis_d() +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none")
#E como criar um mapa perceptual 3D de uma ACM?
ACM_3D <- plot_ly()
# Adicionando as coordenadas
ACM_3D <- add_trace(p = ACM_3D,
x = ACM_mp[,1],
y = ACM_mp[,2],
z = ACM_mp[,3],
mode = "text",
text = rownames(ACM_mp),
textfont = list(color = "#440154FF"),
showlegend = FALSE)
# Adicionando as labels das dimensões
ACM_3D <- layout(p = ACM_3D,
scene = list(xaxis = list(title = colnames(ACM_mp)[1]),
yaxis = list(title = colnames(ACM_mp)[2]),
zaxis = list(title = colnames(ACM_mp)[3]),
aspectmode = "data"))
ACM_3D
# Pacotes a serem instalados e carregados ---------------------------------
pacotes <- c("plotly","tidyverse","ggrepel","sjPlot","reshape2","FactoMineR",
"cabootcrs","knitr","kableExtra","gifski","gganimate","factoextra",
"plot3D","viridis")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load("notasfatorial.RData")
View(notasfatorial)
# Apresentando os dados da base 'notasfatorial'
notasfatorial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
load(file = "perfil_investidor_aplicacao.RData")
View(perfil_investidor_aplicacao)
# Apresentando os dados da base 'perfil_investidor_aplicacao'
perfil_investidor_aplicacao %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Juntado as duas bases
base_dados <- notasfatorial %>%
left_join(perfil_investidor_aplicacao, by = "estudante")
View(base_dados)
# Apresentando a base de dados a ser utilizada
base_dados %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# A) Perfil x Aplicação
tab_perfil_aplicacao <- table(perfil_investidor_aplicacao$perfil,
perfil_investidor_aplicacao$aplicacao)
qui2_perfil_aplicacao <- chisq.test(tab_perfil_aplicacao)
qui2_perfil_aplicacao
# B) Perfil x Estado Civil
tab_perfil_estadocivil <- table(perfil_investidor_aplicacao$perfil,
perfil_investidor_aplicacao$estado_civil)
tab_perfil_estadocivil
qui2_perfil_estadocivil <- chisq.test(tab_perfil_estadocivil)
qui2_perfil_estadocivil
# C) Aplicação x Estado Civil
tab_aplicacao_estadocivil <- table(perfil_investidor_aplicacao$aplicacao,
perfil_investidor_aplicacao$estado_civil)
tab_aplicacao_estadocivil
# 2. A ACM
ACM <- MCA(base_dados[, 6:8], method = "Indicador")
# 3. Capiturando as coordenadas das observações em nossa base de dados
base_dados[c("D1","D2","D3","D4","D5")] <- data.frame(ACM$ind$coord)
View(base_dados)
# 4. Para facilitar o transcorrer do exercício, removeremos as variáveis
# categóricas originais, visto que suas coordenadas já as representam.
base_dados <- base_dados[,-c(6:8)]
# 1. Para a utilização do algoritmo prcomp(), o R exige a padronização dos
# dados. Não utilizaremos as coordenadas da ACM, mas já as estamos padronizando
# porque a subsequente clusterização a exigirá.
base_dados_std <- base_dados %>%
column_to_rownames("estudante") %>%
scale() %>%
data.frame()
# 2. A PCA
AFCP <- prcomp(base_dados_std[,1:4])
AFCP
scores_fatoriais <- t(AFCP$rotation)/AFCP$sdev
#Assumindo-se apenas o F1 e F2 como indicadores, calculam-se os scores
#fatorias
score_D1 <- scores_fatoriais[1,]
score_D1
score_D2 <- scores_fatoriais[2,]
score_D2
F1 <- t(apply(base_dados_std[,1:4], 1, function(x) x * score_D1))
F2 <- t(apply(base_dados_std[,1:4], 1, function(x) x * score_D2))
F1
F2
F1 <- data.frame(F1) %>%
mutate(fator1 = rowSums(.) * 1)
F1
F2 <- data.frame(F1) %>%
mutate(fator2 = rowSums(.) * 1)
F2
base_dados_std[c("F1","F2")] <- cbind(F1$fator1, F2$fator2)
View(base_dados_std)
# 4. Por razões didáticas, excluiremos as variáveis métricas originais da base
# de dados:
base_dados_std <- base_dados_std[,-c(1:4)]
# 1. Clustering
cluster_estudantes <- kmeans(base_dados_std, centers = 2)
# 2. Observando os resultados
fviz_cluster(cluster_estudantes, data = base_dados_std)
# Vamos capturar as coordenadas do eixo Z:
plot <- fviz_cluster(cluster_estudantes, data = base_dados_std)
View(plot)
# Note que só as coordenadas dos eixos X e Y. Vamos "adaptar" o algoritmo
# fviz_cluster() para que ele nos retorne os valores do eixo Z:
fviz_cluster
fviz_cluster_adaptado(object = cluster_estudantes,
data = base_dados_std)
# Aparentemente, nada mudou, certo?
coordenadas <- fviz_cluster_adaptado(object = cluster_estudantes,
data = base_dados_std)
View(coordenadas)
scatter3D(x = coordenadas$data$x,
y = coordenadas$data$y,
z = coordenadas$data$Dim.3,
zlim = c(-3,3),
ylim = c(-3,3),
xlim = c(-3,3),
pch = 19,
bty = "b2",
colvar = as.numeric(coordenadas[["data"]][["cluster"]]),
col = viridis(200))
# 2. Observando os resultados
fviz_cluster(cluster_estudantes, data = base_dados_std)
# Vamos capturar as coordenadas do eixo Z:
plot <- fviz_cluster(cluster_estudantes, data = base_dados_std)
View(plot)
# Note que só as coordenadas dos eixos X e Y. Vamos "adaptar" o algoritmo
# fviz_cluster() para que ele nos retorne os valores do eixo Z:
fviz_cluster
